@page "/register"
@using Microsoft.AspNetCore.Authorization
@using WeatherApp.Models
@using WeatherApp.Services
@inject NavigationManager NavigationManager
@inject IUserService UserService
@attribute [AllowAnonymous]
@rendermode InteractiveServer

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-5">
                <div class="card-body">
                    <h3 class="card-title text-center">Register</h3>
                    <EditForm Model="registerModel" OnValidSubmit="HandleRegistration">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username" class="form-control" @bind-Value="registerModel.Username" />
                            <ValidationMessage For="@(() => registerModel.Username)" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
                            <ValidationMessage For="@(() => registerModel.Email)" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText type="password" id="password" class="form-control" @bind-Value="registerModel.Password" />
                            <ValidationMessage For="@(() => registerModel.Password)" />
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <InputText type="password" id="confirmPassword" class="form-control" @bind-Value="registerModel.ConfirmPassword" />
                            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }

                        <button type="submit" class="btn btn-primary w-100">Register</button>

                        <div class="mt-3 text-center">
                            Already have an account? <a href="/login">Login here</a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private string? errorMessage;

    private async Task HandleRegistration()
    {
        try
        {
            if (await UserService.RegisterUser(registerModel))
            {
                NavigationManager.NavigateTo("/login");
            }
        }
         catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}