@page "/login"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using WeatherApp.Models
@using WeatherApp.Services
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject AuthenticationStateProvider AuthStateProvider
@attribute [AllowAnonymous]
@rendermode InteractiveServer

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-5">
                <div class="card-body">
                    <h3 class="card-title text-center">Login</h3>
                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText type="password" id="password" class="form-control" @bind-Value="loginModel.Password" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }

                        <button type="submit" class="btn btn-primary w-100">Login</button>

                        <div class="mt-3 text-center">
                            Don't have an account? <a href="/register">Register here</a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            Console.WriteLine($"Attempting login for {loginModel.Email}"); // Debug
            var isValid = await UserService.ValidateUser(loginModel.Email, loginModel.Password);
            Console.WriteLine($"IsValid: {isValid}"); // Debug

            if (isValid)
            {
                var authStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
                authStateProvider.LoginUser(loginModel.Email);

                // Add these debug lines
                var authState = await authStateProvider.GetAuthenticationStateAsync();
                Console.WriteLine($"Is authenticated: {authState.User.Identity?.IsAuthenticated}");
                Console.WriteLine($"User claims: {string.Join(", ", authState.User.Claims.Select(c => $"{c.Type}: {c.Value}"))}");

                // Use replace instead of navigate to avoid browser history issues
                NavigationManager.NavigateTo("/", replace: true);
            }
            else
            {
                errorMessage = "Invalid email or password";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Login error: {ex}"); // Debug
            errorMessage = ex.Message;
        }
    }
}